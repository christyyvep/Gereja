import { db } from './firebase'
import { collection, addDoc, getDocs, updateDoc, deleteDoc, doc } from 'firebase/firestore'
import { getAllJemaat, findJemaatByPhone, updateJemaatTelegramUserId, getJemaatWithTelegram } from './jemaatService'
import simpleTelegramRegistration from './simpleTelegramRegistration'

/**
 * Telegram Service untuk mengelola integrasi Telegram
 */
class TelegramService {
  constructor() {
    this.apiUrl = process.env.VUE_APP_TELEGRAM_API_URL || 'https://api.telegram.org'
    this.botToken = process.env.VUE_APP_TELEGRAM_BOT_TOKEN || ''
    // Tidak perlu chatId karena kirim ke individual jemaat
  }

  /**
   * Kirim pesan Telegram
   * @param {string} chatId - Chat ID tujuan (bisa personal atau grup)
   * @param {string} message - Pesan yang akan dikirim
   * @param {Object} options - Opsi tambahan (parse_mode, etc.)
   * @returns {Promise<Object>} Response dari API Telegram
   */
  async sendMessage(chatId, message, options = {}) {
    try {
      const url = `${this.apiUrl}/bot${this.botToken}/sendMessage`
      
      const payload = {
        chat_id: chatId,
        text: message,
        parse_mode: options.parse_mode || 'HTML',
        ...options
      }

      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(`Telegram API error: ${errorData.description || response.statusText}`)
      }

      return await response.json()
    } catch (error) {
      console.error('Error sending Telegram message:', error)
      throw error
    }
  }

  /**
   * Kirim pesan broadcast ke semua user Telegram yang sudah approved
   * @param {string} message - Pesan yang akan dikirim
   * @returns {Promise<Object>} Hasil pengiriman
   */
  async sendBroadcastToAllJemaat(message) {
    try {
      console.log('üì± [TelegramService] Memulai broadcast ke semua user Telegram...')
      
      // Ambil data user Telegram yang sudah approved
      const approvedUsers = await simpleTelegramRegistration.getApprovedRegistrations()
      
      console.log(`üìä [TelegramService] Total user Telegram approved: ${approvedUsers.length}`)
      
      if (approvedUsers.length === 0) {
        return {
          success: true,
          broadcastType: 'individual',
          results: {
            total: 0,
            success: 0,
            failed: 0,
            details: [],
            message: 'Tidak ada user Telegram yang approved'
          }
        }
      }
      
      const results = {
        total: approvedUsers.length,
        success: 0,
        failed: 0,
        details: []
      }
      
      // Kirim ke setiap user dengan delay untuk menghindari rate limit
      for (let i = 0; i < approvedUsers.length; i++) {
        const user = approvedUsers[i]
        
        try {
          // Personalisasi pesan dengan nama user
          const personalMessage = this.personalizeMessageForUser(message, user)
          const result = await this.sendMessage(user.telegramUserId, personalMessage)
          
          results.success++
          results.details.push({
            telegramUserId: user.telegramUserId,
            nama: user.telegramFirstName,
            status: 'success',
            messageId: result.result?.message_id
          })
          
          console.log(`‚úÖ [TelegramService] Berhasil kirim ke ${user.telegramFirstName}`)
          
        } catch (error) {
          results.failed++
          results.details.push({
            telegramUserId: user.telegramUserId,
            nama: user.telegramFirstName,
            status: 'failed',
            error: error.message
          })
          
          console.error(`‚ùå [TelegramService] Gagal kirim ke ${user.telegramFirstName}:`, error.message)
        }
        
        // Delay 100ms antar pengiriman untuk menghindari rate limit
        if (i < approvedUsers.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 100))
        }
      }
      
      // Log hasil broadcast
      await this.saveMessageLog({
        messageType: 'broadcast',
        message: message.substring(0, 100) + '...',
        targetCount: results.total,
        successCount: results.success,
        failedCount: results.failed,
        timestamp: new Date(),
        broadcastResults: results.details
      })
      
      console.log(`üìä [TelegramService] Broadcast selesai: ${results.success}/${results.total} berhasil`)
      
      return {
        success: true,
        broadcastType: 'individual',
        results
      }
      
    } catch (error) {
      console.error('‚ùå [TelegramService] Error dalam broadcast:', error)
      throw error
    }
  }

  /**
   * Personalisasi pesan untuk user Telegram
   */
  personalizeMessageForUser(message, user) {
    const userName = user.telegramFirstName || 'Saudara/i'
    
    // Tambahkan sapaan personal di awal pesan
    return `üôè Untuk ${userName},\n\n${message}`
  }
          
          results.success++
          results.details.push({
            jemaatId: jemaat.id,
            nama: jemaat.nama,
            telegramUserId: jemaat.telegramUserId,
            status: 'sent',
            result: result
          })
          
          console.log(`‚úÖ [TelegramService] Berhasil kirim ke ${jemaat.nama}`)
          
        } catch (error) {
          results.failed++
          results.details.push({
            jemaatId: jemaat.id,
            nama: jemaat.nama,
            telegramUserId: jemaat.telegramUserId,
            status: 'failed',
            error: error.message
          })
          
          console.error(`‚ùå [TelegramService] Gagal kirim ke ${jemaat.nama}:`, error.message)
        }
        
        // Delay 1 detik antar pengiriman untuk menghindari rate limit
        if (i < jemaatWithTelegram.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 1000))
        }
      }
      
      console.log(`üìä [TelegramService] Broadcast selesai. Sukses: ${results.success}, Gagal: ${results.failed}`)
      
      return {
        success: true,
        broadcastType: 'individual',
        results
      }
      
    } catch (error) {
      console.error('Error sending broadcast to all jemaat:', error)
      throw error
    }
  }

  /**
   * Personalisasi pesan untuk setiap jemaat
   * @param {string} message - Pesan asli
   * @param {Object} jemaat - Data jemaat
   * @returns {string} Pesan yang dipersonalisasi
   */
  personalizeMessage(message, jemaat) {
    const personalGreeting = `üôè Halo ${jemaat.nama}!\n\n`
    return personalGreeting + message
  }

  /**
   * Kirim renungan otomatis ke semua jemaat via Telegram saat admin upload renungan baru
   * @param {Object} renunganData - Data renungan yang baru diupload
   * @returns {Promise<Object>} Hasil pengiriman
   */
  async sendRenunganToTelegram(renunganData) {
    try {
      console.log('üì± [TelegramService] Mengirim renungan ke semua jemaat:', renunganData.title)
      
      // Format pesan renungan untuk Telegram
      const message = this.formatRenunganMessage(renunganData)
      
      // Kirim ke semua jemaat individu
      const result = await this.sendBroadcastToAllJemaat(message)
      
      // Simpan log pengiriman
      await this.saveMessageLog({
        type: 'renungan_broadcast',
        broadcastType: 'individual',
        totalSent: result.results.success,
        totalFailed: result.results.failed,
        totalJemaat: result.results.total,
        message: message,
        renunganId: renunganData.id,
        renunganTitle: renunganData.title,
        sentBy: renunganData.createdBy || 'admin',
        result: result,
        details: result.results.details
      })
      
      console.log(`‚úÖ [TelegramService] Renungan berhasil dikirim ke ${result.results.success}/${result.results.total} jemaat`)
      return result
      
    } catch (error) {
      console.error('‚ùå [TelegramService] Error mengirim renungan ke Telegram:', error)
      
      // Simpan log error
      await this.saveMessageLog({
        type: 'renungan_broadcast_error',
        renunganId: renunganData.id,
        renunganTitle: renunganData.title,
        sentBy: renunganData.createdBy || 'admin',
        error: error.message,
        status: 'failed'
      })
      
      throw error
    }
  }

  /**
   * Simpan log pesan ke Firestore
   * @param {Object} messageData - Data pesan
   * @returns {Promise<string>} Document ID
   */
  async saveMessageLog(messageData) {
    try {
      const docRef = await addDoc(collection(db, 'telegram_logs'), {
        ...messageData,
        timestamp: new Date(),
        status: messageData.status || 'sent'
      })
      return docRef.id
    } catch (error) {
      console.error('Error saving message log:', error)
      throw error
    }
  }

  /**
   * Ambil history pesan dari Firestore
   * @returns {Promise<Array>} Array history pesan
   */
  async getMessageHistory() {
    try {
      const querySnapshot = await getDocs(collection(db, 'telegram_logs'))
      const messages = []
      
      querySnapshot.forEach((doc) => {
        messages.push({
          id: doc.id,
          ...doc.data()
        })
      })

      return messages.sort((a, b) => b.timestamp - a.timestamp)
    } catch (error) {
      console.error('Error getting message history:', error)
      throw error
    }
  }

  /**
   * Update status pesan
   * @param {string} messageId - ID dokumen pesan
   * @param {string} status - Status baru
   * @returns {Promise<void>}
   */
  async updateMessageStatus(messageId, status) {
    try {
      const messageRef = doc(db, 'telegram_logs', messageId)
      await updateDoc(messageRef, {
        status,
        updatedAt: new Date()
      })
    } catch (error) {
      console.error('Error updating message status:', error)
      throw error
    }
  }

  /**
   * Hapus log pesan
   * @param {string} messageId - ID dokumen pesan
   * @returns {Promise<void>}
   */
  async deleteMessageLog(messageId) {
    try {
      await deleteDoc(doc(db, 'telegram_logs', messageId))
    } catch (error) {
      console.error('Error deleting message log:', error)
      throw error
    }
  }

  /**
   * Format pesan renungan untuk Telegram
   * @param {Object} renunganData - Data renungan
   * @returns {string} Pesan yang diformat untuk Telegram
   */
  formatRenunganMessage(renunganData) {
    const today = new Date().toLocaleDateString('id-ID', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    })

    let message = `üôè <b>RENUNGAN HARIAN</b>\n`
    message += `üìÖ ${today}\n\n`
    
    if (renunganData.title) {
      message += `<b>${renunganData.title}</b>\n\n`
    }
    
    if (renunganData.verse) {
      message += `üìñ <i>${renunganData.verse}</i>\n\n`
    }
    
    if (renunganData.content) {
      // Limit content untuk menghindari pesan terlalu panjang
      const maxLength = 3000
      let content = renunganData.content
      if (content.length > maxLength) {
        content = content.substring(0, maxLength) + '...\n\n<i>[Baca selengkapnya di aplikasi MyRajawali]</i>'
      }
      message += `${content}\n\n`
    }
    
    if (renunganData.prayer) {
      message += `ü§≤ <b>Doa:</b>\n${renunganData.prayer}\n\n`
    }
    
    message += `üíù Tuhan Yesus memberkati\n`
    message += `üèõÔ∏è <b>Gereja MyRajawali</b>`
    
    return message
  }

  /**
   * Dapatkan info jemaat untuk statistik pengiriman
   * @returns {Promise<Object>} Statistik jemaat
   */
  async getJemaatStats() {
    try {
      const allJemaat = await getAllJemaat()
      const jemaatWithTelegram = await getJemaatWithTelegram()
      
      const stats = {
        total: allJemaat.length,
        registered: allJemaat.filter(j => j.isRegistered).length,
        active: allJemaat.filter(j => j.status === 'aktif').length,
        withPhone: allJemaat.filter(j => j.noHP && j.noHP.trim()).length,
        withTelegram: jemaatWithTelegram.length,
        telegramPercentage: allJemaat.length > 0 ? Math.round((jemaatWithTelegram.length / allJemaat.length) * 100) : 0
      }
      
      return stats
    } catch (error) {
      console.error('Error getting jemaat stats:', error)
      return { 
        total: 0, 
        registered: 0, 
        active: 0, 
        withPhone: 0, 
        withTelegram: 0,
        telegramPercentage: 0
      }
    }
  }

  /**
   * Template pesan untuk berbagai keperluan
   */
  getMessageTemplates() {
    return {
      welcome: (name) => `üéâ Selamat datang di MyRajawali, ${name}! Terima kasih telah bergabung dengan komunitas kami.`,
      reminder: (name, event) => `üîî Halo ${name}, ini adalah pengingat untuk acara ${event}. Jangan lupa untuk hadir!`,
      announcement: (title, content) => `üì¢ <b>PENGUMUMAN</b>\n\n<b>${title}</b>\n\n${content}`,
      birthday: (name) => `üéÇ Selamat Ulang Tahun, ${name}! Tuhan Yesus memberkati hidup Anda.`,
      prayer: (name, request) => `üôè <b>Permohonan Doa</b>\n\nDari: ${name}\n\n${request}\n\nMari kita doakan bersama.`,
      devotional: (title, verse, content) => `üôè <b>RENUNGAN HARIAN</b>\n\n<b>${title}</b>\n\nüìñ <i>${verse}</i>\n\n${content}`
    }
  }

  /**
   * Test koneksi ke Telegram Bot API
   * @returns {Promise<Object>} Info bot dan status koneksi
   */
  async testConnection() {
    try {
      const url = `${this.apiUrl}/bot${this.botToken}/getMe`
      
      const response = await fetch(url)
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`)
      }
      
      const data = await response.json()
      
      if (data.ok) {
        return {
          success: true,
          botInfo: data.result,
          message: `Bot "${data.result.first_name}" (@${data.result.username}) terhubung dengan sukses!`
        }
      } else {
        throw new Error(data.description || 'Unknown Telegram API error')
      }
      
    } catch (error) {
      console.error('Error testing Telegram connection:', error)
      return {
        success: false,
        error: error.message,
        message: 'Gagal terhubung ke Telegram Bot API'
      }
    }
  }

  /**
   * Konversi nomor HP ke Telegram User ID (untuk testing/setup awal)
   * Note: Ini hanya contoh implementasi. Di praktiknya, jemaat harus:
   * 1. Chat dengan bot terlebih dahulu
   * 2. Bot menyimpan chat_id mereka ke database
   * @param {string} phoneNumber - Nomor HP jemaat
   * @returns {string|null} Telegram User ID jika ada
   */
  // eslint-disable-next-line no-unused-vars
  getJemaatTelegramUserId(phoneNumber) {
    // Placeholder implementasi
    // Di production, ini akan mengambil dari database mapping
    // Format nomor HP ke Telegram User ID
    return null
  }

  /**
   * Registrasi jemaat ke bot Telegram
   * Dipanggil ketika jemaat pertama kali chat dengan bot
   * @param {string} telegramUserId - User ID dari Telegram
   * @param {string} phoneNumber - Nomor HP jemaat untuk matching
   * @returns {Promise<Object>} Status registrasi dan data jemaat
   */
  async registerJemaatTelegram(telegramUserId, phoneNumber) {
    try {
      console.log(`üì± [TelegramService] Registering jemaat: ${phoneNumber} -> ${telegramUserId}`)
      
      // Cari jemaat berdasarkan nomor HP
      const jemaatData = await findJemaatByPhone(phoneNumber)
      
      if (!jemaatData) {
        return {
          success: false,
          message: 'Nomor HP tidak ditemukan dalam database jemaat. Silakan hubungi admin gereja.'
        }
      }
      
      // Update telegramUserId di database jemaat
      await updateJemaatTelegramUserId(jemaatData.id, telegramUserId)
      
      // Kirim pesan welcome
      await this.sendWelcomeMessage(telegramUserId, jemaatData)
      
      console.log(`‚úÖ [TelegramService] Jemaat ${jemaatData.nama} berhasil terdaftar`)
      
      return {
        success: true,
        message: `Selamat datang ${jemaatData.nama}! Anda berhasil terdaftar untuk menerima renungan harian.`,
        jemaatData: {
          id: jemaatData.id,
          nama: jemaatData.nama,
          sektor: jemaatData.sektor
        }
      }
      
    } catch (error) {
      console.error('Error registering jemaat to Telegram:', error)
      return {
        success: false,
        message: 'Terjadi error saat registrasi. Silakan coba lagi atau hubungi admin.'
      }
    }
  }

  /**
   * Kirim pesan welcome saat jemaat pertama kali chat dengan bot
   * @param {string} telegramUserId - User ID Telegram jemaat
   * @param {Object} jemaatData - Data jemaat
   * @returns {Promise<Object>} Hasil pengiriman
   */
  async sendWelcomeMessage(telegramUserId, jemaatData) {
    try {
      const welcomeMessage = `üôè Selamat datang ${jemaatData.nama}!\n\nTerima kasih telah terhubung dengan MyRajawali Bot.\n\nAnda akan menerima:\nüìñ Renungan harian\nüì¢ Pengumuman gereja  \nüéÇ Ucapan ulang tahun\nüôè Permohonan doa\n\nTuhan Yesus memberkati! \nüèõÔ∏è Gereja MyRajawali`

      return await this.sendMessage(telegramUserId, welcomeMessage)
    } catch (error) {
      console.error('Error sending welcome message:', error)
      throw error
    }
  }

  /**
   * Handle Telegram webhook/updates untuk auto-registrasi
   * Dipanggil ketika ada pesan masuk ke bot
   */
  async handleTelegramWebhook(update) {
    try {
      console.log('üì• [TelegramService] Received webhook update:', update)
      
      if (!update.message) {
        return { success: false, message: 'No message in update' }
      }
      
      const message = update.message
      const telegramUser = message.from
      const text = message.text
      
      console.log(`üì± Message from ${telegramUser.first_name}: ${text}`)
      
      // Handle command /start untuk registrasi
      if (text === '/start' || text === '/start@MyRajawali_bot') {
        return await this.handleStartCommand(telegramUser)
      }
      
      // Handle pesan lainnya jika diperlukan
      return await this.handleRegularMessage(telegramUser, text)
      
    } catch (error) {
      console.error('‚ùå [TelegramService] Webhook error:', error)
      return { success: false, error: error.message }
    }
  }
  
  /**
   * Handle command /start - auto registrasi
   */
  async handleStartCommand(telegramUser) {
    try {
      console.log(`üöÄ [TelegramService] Processing /start from ${telegramUser.first_name}`)
      
      // Gunakan simple registration system
      const result = await simpleTelegramRegistration.autoRegister(telegramUser)
      
      console.log(`‚úÖ [TelegramService] Auto-registration result:`, result)
      return result
      
    } catch (error) {
      console.error('‚ùå Error handling /start command:', error)
      return { success: false, error: error.message }
    }
  }
  
  /**
   * Handle pesan reguler (bukan command)
   */
  async handleRegularMessage(telegramUser, text) {
    try {
      // Cek apakah user sudah terdaftar
      const isRegistered = await simpleTelegramRegistration.checkExistingUser(telegramUser.id)
      
      if (!isRegistered) {
        // User belum terdaftar, minta untuk /start dulu
        const helpMessage = `üëã Halo ${telegramUser.first_name}!

Sepertinya Anda belum terdaftar. 

üöÄ Silakan kirim /start untuk mendaftar terlebih dahulu.

üôè Terima kasih!`
        
        await this.sendMessage(telegramUser.id, helpMessage)
        return { success: true, message: 'Sent registration help' }
      }
      
      // User sudah terdaftar, bisa handle pesan lain di sini
      // Misalnya: bantuan, info, dll.
      
      return { success: true, message: 'Message received from registered user' }
      
    } catch (error) {
      console.error('Error handling regular message:', error)
      return { success: false, error: error.message }
    }
  }
}

export default new TelegramService()
